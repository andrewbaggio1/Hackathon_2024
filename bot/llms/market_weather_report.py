import os
import pandas as pd
from transformers import pipeline
import logging

# Optional: Uncomment the following lines to enable logging
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def summarize_market_data(friday_data):
    """
    Summarize the Friday market data by identifying top gainers, top losers, and highest volume stocks.
    
    :param friday_data: DataFrame containing Friday's market data.
    :return: A dictionary summarizing key market insights.
    """
    # Calculate percentage change based on previous day's Close price
    # Assumption: 'Adj Close' represents the previous day's close
    friday_data['pct_change'] = ((friday_data['Close'] - friday_data['Adj Close']) / friday_data['Adj Close']) * 100
    
    # Identify top 5 gainers
    top_gainers = friday_data.nlargest(5, 'pct_change')[['Ticker', 'pct_change']]
    
    # Identify top 5 losers
    top_losers = friday_data.nsmallest(5, 'pct_change')[['Ticker', 'pct_change']]
    
    # Identify top 5 highest volume stocks
    top_volume = friday_data.nlargest(5, 'Volume')[['Ticker', 'Volume']]
    
    summary = {
        'Top Gainers': top_gainers.to_dict(orient='records'),
        'Top Losers': top_losers.to_dict(orient='records'),
        'Highest Volume': top_volume.to_dict(orient='records')
    }
    
    return summary

def format_summary_for_prompt(summary, target_date):
    """
    Format the summarized data into a prompt suitable for the LLM.
    
    :param summary: Dictionary containing summarized market data.
    :param target_date: The date of the market data.
    :return: A formatted string to be used as a prompt.
    """
    prompt = f"Market Weather Forecast for {target_date}:\n\n"
    
    prompt += "Top 5 Gainers:\n"
    for item in summary['Top Gainers']:
        prompt += f"- {item['Ticker']}: {item['pct_change']:.2f}%\n"
    
    prompt += "\nTop 5 Losers:\n"
    for item in summary['Top Losers']:
        prompt += f"- {item['Ticker']}: {item['pct_change']:.2f}%\n"
    
    prompt += "\nTop 5 Highest Volume Stocks:\n"
    for item in summary['Highest Volume']:
        prompt += f"- {item['Ticker']}: {item['Volume']}\n"
    
    prompt += "\nProvide a concise weather forecast-style summary in plain language about the stock market's performance on the given date. Include insights on major trends, noteworthy stock movements, and any significant patterns."
    
    return prompt

def generate_market_snapshot(prompt):
    """
    Generate a market snapshot using a Large Language Model (LLM).
    
    :param prompt: The prompt to be fed into the LLM.
    :return: Market snapshot as plain text.
    """
    try:
        # Initialize the text generation pipeline with an open-source model
        generator = pipeline("text-generation", model="gpt2", max_length=300, temperature=0.7)
        
        # Generate the summary
        response = generator(prompt, max_length=300, num_return_sequences=1)
        
        return response[0]['generated_text']
    except Exception as e:
        logging.error(f"Error generating summary: {e}")
        return f"Error generating summary: {e}"

def main():
    """
    Main function to execute the data processing and generate the market snapshot.
    """
    # Path to the CSV file generated by the previous script
    csv_file_path = os.path.join('friday_data', 'market_data_2024-10-18.csv')
    
    if not os.path.exists(csv_file_path):
        logging.error(f"CSV file not found at {csv_file_path}. Please ensure the data is available.")
        return
    
    # Load the aggregated market data
    try:
        friday_data = pd.read_csv(csv_file_path, parse_dates=['Date'])
    except Exception as e:
        logging.error(f"Error reading CSV file: {e}")
        return
    
    # Summarize the data
    summary = summarize_market_data(friday_data)
    
    # Format the summary into a prompt
    target_date = '2024-10-18'
    prompt = format_summary_for_prompt(summary, target_date)
    
    # Generate the market snapshot using the LLM
    snapshot = generate_market_snapshot(prompt)
    
    return snapshot

if __name__ == "__main__":
    snapshot_text = main()
    if snapshot_text:
        print("Market Weather Forecast:")
        print(snapshot_text)
    
    # 1. Scheduling Demonstration:
    # The following code demonstrates how to update the weather forecast every 4 hours,
    # assuming the CSV is updated every hour. This is commented out as per instructions.
    
    """
    import time
    
    while True:
        snapshot_text = main()
        if snapshot_text:
            print("Market Weather Forecast:")
            print(snapshot_text)
        
        # Wait for 4 hours (4 * 60 * 60 seconds)
        time.sleep(4 * 60 * 60)
    """